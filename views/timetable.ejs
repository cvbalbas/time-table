<!DOCTYPE html>
<html>
<head>
	<!--import Boostrap plugin-->
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
	<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
	<!-- Add icon library -->
	<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.3.0/font/bootstrap-icons.css">

	<style>
		body {
			background-color: ghostwhite;
		}
		table {
			border:  3px solid white;
			border-collapse: collapse;	/*no borders*/
			width: 80%;
			margin-left: auto;
	  		margin-right: auto;
	  		font-family: "Gill Sans", sans-serif;
	  		z-index: 1;				/*table is over the highlight*/
	  		overflow: hidden;		/*cuts off the column highlight as to not overflow*/
	  		border-radius: 20px;	/*rounded corners*/
	  		box-shadow: 5px 10px 50px rgba(0, 0, 0, 0.25); /*offset, offset, blur, colour of shadow*/
		}

		h2 {
			width: 80%;			/*same width of table so it aligns*/
	  		font-family: "Gill Sans", sans-serif;
	  		margin-left: auto;
	  		margin-right: auto;
	  		text-align: left;
	  		text-transform: uppercase;
	  		font-weight: bold;
			color: #4F4F4F;
		}

		td, th {
			cursor: pointer;
			padding: 20px;
			position: relative;
			text-align: center;
			width: 12.5%;			/*equal width for all columns*/
			word-break: break-word; /*wrap words*/
			color: #4F4F4F;
		}


		th {
			background-color: #4F4F4F;	/*colour will stay the same even on hover*/
			color: #FFFFFF;
			text-transform: uppercase;
		}

		.button {					/*format of + buttons*/
			border: none;
			color: #684BA3;
			background-color: transparent;
			padding: 1px 1px;
			text-align: center;
			font-size: 8px;
			margin: 5px 5px;
			cursor: pointer;
			float: right;
		}

		tr:hover {					/*highlights rows*/
			background-color: rgba(240, 217, 255, 0.5);
			z-index: -1;			/*behind the table*/
		}

		td:hover::after { 			/*highlights columns*/
			background-color: rgba(240, 217, 255, 0.5);
		    content: "";			/*content that needs to be highlighted*/
		    height: 10000px;    	/*size of the content*/
		    left: 0;
		    position: absolute;  
		    top: -5000px;
		    width: 100%;
		    z-index: -1;			/*behind the table*/
		}
		
		.chevron {
			display: inline-block; /*the top and bottom margins/paddings are respected; does not add a line-break after the element, so the element can sit next to other elements.*/
			border-radius: 0px;
			background-color: #684BA3;
			border: none;
			color: #FFFFFF;
			text-align: center;
			font-size: 25px;
			padding: 0px;
			width: 60px;
			transition: all 0.5s;	/*0.5s transition to change of bg color during hover; see .chevron:hover*/
			cursor: pointer;
			margin: 5px;
			border-radius: 10px;
			float: right;
		}

		.chevron span {
			cursor: pointer;
			display: inline-block;	
			position: relative;
			transition: 0.5s;	/*0.5s transition from < to <<*/
		}

		.chevron:hover {
			background-color: #7E5398; 
		}

		.leftbtn{
			margin-left: 20px !important;
		}

		.leftbtn .left:before {			/*uses :before for animation to happen when you hover to the button instead of out of the button*/
			content: '\00ab';			/*contains << but invisible (opacity 0)*/
			position: absolute;
			opacity: 0;
			top: 0;
			right: 0px;
			/*transition: 0.5s;*/	
			color: #ffffff;
		}

		.leftbtn:hover .left {
			padding-left: 15px;
			color: #7E5398;			/*changes colour of < to become "invisible"*/
		}

		.leftbtn:hover .left:before {		
			opacity: 1;			/* >> becomes visible */
			left: 0;
		}

		.rightbtn .right:before {
			content: '\00bb';		/*>>*/
			position: absolute;
			opacity: 0;
			top: 0;
			left: 0px;
			transition: 0.5s;
			color: #ffffff;
		}

		.rightbtn:hover .right {
			padding-right: 15px;
			color: #7E5398;
		}

		.rightbtn:hover .right:before {
			opacity: 1;
			right: 0;
		}

		.addtable {
			position: relative;
			bottom: 0;
			font-size: 35px;
			background-color: transparent;
			border: none;
			color: #684BA3;
			cursor: pointer;
			float: right;
			
		}

		.title {
			background-color: transparent;
			width: 25%;
			height: 1%;
			position: absolute;
			margin-left: auto;
	  		margin-right: auto;
			left: 65%;
			top: 35px;
			z-index: 2;
			display: table-row;
		}

		.loader {
			margin-left: auto;
			margin-right: auto;
			margin-top: 18%;
			position: relative;
			border: 16px solid #f3f3f3; /* Light grey */
			border-top: 16px solid #7E5398; /* Blue */
			border-radius: 50%;
			width: 120px;
			height: 120px;
			animation: spin 2s linear infinite;
		}
		

		@keyframes spin {
		0% { transform: rotate(0deg); }
		100% { transform: rotate(360deg); }
		}

		.defaultbtn{
			width: 50px;
		}

		.thisWeekbtn{
			width: 50px;
		}

		.default th, .thisWeek th {
			background-color: #A96CCE !important;	
			color: #FFFFFF;
		}
		.default h2, .default td, .thisWeek h2, .thisWeek td {
			color: #4F4F4F;
		}
		.default tr:hover, .default td:hover::after {
			background-color: rgba(249, 249, 249, 0.5);
		}

		.past th { 
			background-color: #BEAEE2 !important;
			color: #F0D9FF;
			text-transform: uppercase;
		}
		.past td, .past h2{
			color: 	#BEAEE2;
		}

		.future th { 
			background-color: #8666C5 !important;
			color: #FFF;
			text-transform: uppercase;
		}

		.tutorbtn{
			width: 150px;
		}

		.bi-person{
			float: left;
			padding-left: 10px;
			margin-right: -10px;
		}

		#tutorname{
			text-align: center !important;
		}
		
	</style>
</head>

<body>
    <!-- Left and right controls -->
	<div class = "title">
    	<button class="chevron rightbtn" onclick="detectActive(this); AddTable();" href="#myCarousel" data-slide="next">
	    	<span class="right"> › </span>
	    </button>
    	<button class="chevron leftbtn" id = "left" onclick="detectActive(this)" href="#myCarousel" data-slide="prev">
    		<span class="left"> ‹ </span>
	    </button>	
		<button class ="chevron tutorbtn" onclick="changeTutor()"><i class="bi bi-person"></i><span id ="tutorname"></span></button>
		<button class ="chevron defaultbtn" onclick="displayDefault()"><i class="bi bi-pen"></i></button>
		<button class ="chevron thisWeekbtn" onclick="displayThisWeek()"><i class="bi bi-calendar-event"></i></button>
    </div>
	<!--start of carousel-->
	<div id="myCarousel" class="carousel slide" style="top: 27px;" data-interval="false" data-wrap="false">
	    <div id = "tables" class="carousel-inner">
	  	</div>    
	</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/web-socket-js/1.0.0/web_socket.min.js" integrity="sha512-jtr9/t8rtBf1Sv832XjG1kAtUECQCqFnTAJWccL8CSC82VGzkPPih8rjtOfiiRKgqLXpLA1H/uQ/nq2bkHGWTQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

<script>
	const url = 'ws://localhost:8080'
    const connection = new WebSocket(url)

	var data = [{}]
	var tablecount
	var tutors = ["caryl", "eena"]

	if (!localStorage.getItem('tutor')){
		localStorage.setItem('tutor', tutors[0])
	}

	$.ajax({
		type: 'POST',			//copy values of primary row to new row, with new id = weekdate
		url: 'http://localhost:3000/getTimetableData',
		data: {'tutor': localStorage.getItem('tutor')},
		success: function(result){data = JSON.parse(result); tablecount = Object.keys(data).length;	loadTable(); loadCellData()}
	});

	document.getElementById("tutorname").innerHTML= localStorage.getItem('tutor')

	let todayDate = new Date();					//gets current day
	let dayofweeknumber = todayDate.getDay();
	let nameOfDay;
	let weekOfDate = new Date()
	weekOfDate.setDate(weekOfDate.getDate() - dayofweeknumber + 1)
	weekOfDateMySQLFriendly = weekOfDate.toLocaleDateString("en-US", {timeZone: "Europe/London"})
	weekOfDate  = weekOfDate.toLocaleDateString("en-GB", {timeZone: "Europe/London"})

	function loadTable() {

		document.getElementById("tables").innerHTML = "<div class='loader'></div> <div class='item default'> <h2> Default Schedule </h2><table><tr> <th>Time</th> <th>Monday</th> <th>Tuesday</th> <th>Wednesday</th> <th>Thursday</th> <th>Friday</th> <th>Saturday</th> <th>Sunday</th> </tr> <tr> <th>0900-1000</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1000-1100</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1100-1200</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1200-1300</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1300-1400</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1400-1500</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1500-1600</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1600-1700</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1700-1800</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1800-1900</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1900-2000</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>2000-2100</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> </table> </br></br></br> </div>"

		let weekformat = "past";
		for ( var tblinc = 1; tblinc < tablecount; tblinc++ ) {

			console.log(data[tblinc.toString()]["id"]);
			
			var date = new Date(data[tblinc.toString()]["weekdate"])
			date = date.toLocaleDateString("en-GB", {timeZone: "Europe/London"})

			let newtable = '<div class="item ' + weekformat + '"><h2>Week of ' + date + '</h2><table><tr> <th>Time</th> <th>Monday</th> <th>Tuesday</th> <th>Wednesday</th> <th>Thursday</th> <th>Friday</th> <th>Saturday</th> <th>Sunday</th> </tr> <tr> <th>0900-1000</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1000-1100</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1100-1200</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1200-1300</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1300-1400</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1400-1500</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1500-1600</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1600-1700</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1700-1800</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1800-1900</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1900-2000</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>2000-2100</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> </table> </br></br></br> </div>';
	    
			if (date == weekOfDate){
				currentweektable = tblinc;
				weekformat = "future"
				document.getElementsByClassName("loader")[0].style.display = "none"
				newtable = '<div class="item thisWeek active"><h2>Week of ' + date + '</h2><table><tr> <th>Time</th> <th class = "monday">Monday</th> <th class = "tuesday">Tuesday</th> <th class = "wednesday">Wednesday</th> <th class = "thursday">Thursday</th> <th class = "friday">Friday</th> <th class = "saturday">Saturday</th> <th class = "sunday">Sunday</th> </tr> <tr> <th>0900-1000</th> <td class = "monday"></td> <td class = "tuesday"></td> <td class = "wednesday"></td> <td class = "thursday"></td> <td class = "friday"></td> <td class = "saturday"></td> <td class = "sunday"></td> </tr> <tr> <th>1000-1100</th> <td class = "monday"></td> <td class = "tuesday"></td> <td class = "wednesday"></td> <td class = "thursday"></td> <td class = "friday"></td> <td class = "saturday"></td> <td class = "sunday"></td> </tr> <tr> <th>1100-1200</th> <td class = "monday"></td> <td class = "tuesday"></td> <td class = "wednesday"></td> <td class = "thursday"></td> <td class = "friday"></td> <td class = "saturday"></td> <td class = "sunday"></td> </tr> <tr> <th>1200-1300</th> <td class = "monday"></td> <td class = "tuesday"></td> <td class = "wednesday"></td> <td class = "thursday"></td> <td class = "friday"></td> <td class = "saturday"></td> <td class = "sunday"></td> </tr> <tr> <th>1300-1400</th> <td class = "monday"></td> <td class = "tuesday"></td> <td class = "wednesday"></td> <td class = "thursday"></td> <td class = "friday"></td> <td class = "saturday"></td> <td class = "sunday"></td> </tr> <tr> <th>1400-1500</th> <td class = "monday"></td> <td class = "tuesday"></td> <td class = "wednesday"></td> <td class = "thursday"></td> <td class = "friday"></td> <td class = "saturday"></td> <td class = "sunday"></td> </tr> <tr> <th>1500-1600</th> <td class = "monday"></td> <td class = "tuesday"></td> <td class = "wednesday"></td> <td class = "thursday"></td> <td class = "friday"></td> <td class = "saturday"></td> <td class = "sunday"></td> </tr> <tr> <th>1600-1700</th> <td class = "monday"></td> <td class = "tuesday"></td> <td class = "wednesday"></td> <td class = "thursday"></td> <td class = "friday"></td> <td class = "saturday"></td> <td class = "sunday"></td> </tr> <tr> <th>1700-1800</th> <td class = "monday"></td> <td class = "tuesday"></td> <td class = "wednesday"></td> <td class = "thursday"></td> <td class = "friday"></td> <td class = "saturday"></td> <td class = "sunday"></td> </tr> <tr> <th>1800-1900</th> <td class = "monday"></td> <td class = "tuesday"></td> <td class = "wednesday"></td> <td class = "thursday"></td> <td class = "friday"></td> <td class = "saturday"></td> <td class = "sunday"></td> </tr> <tr> <th>1900-2000</th> <td class = "monday"></td> <td class = "tuesday"></td> <td class = "wednesday"></td> <td class = "thursday"></td> <td class = "friday"></td> <td class = "saturday"></td> <td class = "sunday"></td> </tr> <tr> <th>2000-2100</th> <td class = "monday"></td> <td class = "tuesday"></td> <td class = "wednesday"></td> <td class = "thursday"></td> <td class = "friday"></td> <td class = "saturday"></td> <td class = "sunday"></td> </tr> </table> </br></br></br> </div>'; }

			tables.insertAdjacentHTML("beforeend", newtable); //print existing table
			
		}

        switch(dayofweeknumber) {
		case 0: 
        	nameOfDay = 'sunday';
        	break;

   		case 1:
        	nameOfDay = 'monday';
        	break;

    	case 2:
        	nameOfDay = 'tuesday';
        	break;

    	case 3:
        	nameOfDay = 'wednesday';
        	break;

    	case 4:
        	nameOfDay = 'thursday';
        	break;

    	case 5:
        	nameOfDay = 'friday';
        	break;

    	case 6:
        	nameOfDay = 'saturday';
        	break;
		}

		for (var i = 0; i < 13 ; i++) {	
			document.getElementsByClassName(nameOfDay)[i].style.backgroundColor = "rgba(240, 217, 255, 0.7)";
		}

	}

	function AddTable(){		//When Add Table button is clicked, prints a new table
		if (document.getElementsByClassName("active")[0].innerHTML.includes("t "+(data.length-1).toString())){
						
			let date = new Date(getActiveTableDate())
			console.log(getActiveTableDate())
			date.setDate(date.getDate() + 7);
			date = date.toLocaleDateString("en-GB", {timeZone: "Europe/London"})

			let weekdate =  date	/*adds date of Monday to table title*/

			if (weekdate == null || weekdate == "") {
			} 

			else {			//if there's an inputted value in prompt, add table
				$.ajax({
					type: 'POST',			//copy values of primary row to new row, with new id = weekdate
					url: 'http://localhost:3000/addTimetableTable',
					data: {'tutor': localStorage.getItem('tutor'), 'weekdate': weekdate.toString().split("/").reverse().join("-")},
				});

				data[tablecount] = data [0];				//copy values of primary row to new row
				data[tablecount.toString()]['weekdate'] = weekdate;	//change id of new row to weekdate

				let newtable = '<div class="item future"><h2>Week of ' + weekdate + '</h2><table><tr> <th>Time</th> <th>Monday</th> <th>Tuesday</th> <th>Wednesday</th> <th>Thursday</th> <th>Friday</th> <th>Saturday</th> <th>Sunday</th> </tr> <tr> <th>0900-1000</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1000-1100</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1100-1200</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1200-1300</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1300-1400</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1400-1500</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1500-1600</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1600-1700</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1700-1800</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1800-1900</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1900-2000</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>2000-2100</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> </table> </br></br></br> </div>';
			
				tables.insertAdjacentHTML("beforeend", newtable); //print new table
				
				//console.log(tablecount);
				var index = tablecount*84;	//one table = 84 cells. First cell in new table should start at multiples of 84
				var tds = document.getElementsByTagName("td");	//get all td elements

				for (let cellinc = 0; cellinc < 84; cellinc++) {
					tds[index].innerHTML = '<div id="t ' + tablecount + ' c ' + cellinc + '">' + data[tablecount]["c"+cellinc.toString()] + '</div>' + tds[index].innerHTML + '<button id="' + tablecount + ' c ' + cellinc + '" class="button" onclick="SetCell(this)"><i class="bi bi-pencil"></i></button></section>';
					index = index + 1;
				}
			}
			
		tablecount++
		}

	}


    function SetCell(btn) {				//when button is clicked, a prompt shows asking for a name to add.
        let cell = "t " + btn.id;
        let text;
        let person = prompt("Please enter name:");

        if (person == null || person == "") {
        }

        else {
            text = person ;
            document.getElementById(cell).innerHTML = text;		//Saves it to the cell# that triggered the function.

	        const cellnumber = cell.split(" ");		//splits it at the spaces
	        let cellname = "c" + cellnumber[3];		//gets the cell number; cellnumber[1] is the table#
	        let tablename = data[cellnumber[1].toString()]["weekdate"]; //gets the ID of the row

	        console.log("before:" + tablename)
	        let date2 = new Date(tablename)
	        console.log(date2)
	        if (date2.toString() !== "Invalid Date") {
				tablename = date2.toLocaleDateString("en-GB", {timeZone: "Europe/London"})
				console.log("local" + tablename)
			}
	        tablename = tablename.slice(0,10).split("/").reverse().join("-");


	        console.log("SetCell" + tablename + cellname + text)

		if (btn.id.substring(0,1) == "0"){
			updateTimetableTable(text, tablename, cellname, "all")
		}else{
			updateTimetableTable(text, tablename, cellname, "single")
		}

        }

    }

    var reload = true;

    connection.onmessage = (e) => {
	   	var message = e.data.split(" ")[0]
		if (message == "tutor:"){
			let tutor = removeFirstWord(e.data)
			console.log(localStorage.getItem('tutor'))
			console.log(tutor)
			if (tutor == localStorage.getItem('tutor')){
				console.log("do reload")
				reload = true
			}else{
				console.log("don't reload")
				reload = false
			}
		}
		if (message == "data:" && reload == true){
			data = JSON.parse(removeFirstWord(e.data))
			tablecount = Object.keys(data).length;
			loadCellData()
			document.getElementsByClassName("loader")[0].style.display = "none"
	    }
		if (message == "rowsNotUpdated:" && reload == true){
			let rowsNotUpdated = JSON.parse(removeFirstWord(e.data))
			loadRowsNotUpdatedAlert(rowsNotUpdated)
		}
    }

	function changeTutor(){
		let tutor;
		if (tutors.indexOf(localStorage.getItem('tutor')) == tutors.length-1){
			tutor = tutors[0]
		}else{
			tutor = tutors[tutors.indexOf(localStorage.getItem('tutor'))+1]
		}
		localStorage.setItem('tutor', tutor)
		
		window.location.reload()
	}

	function getActiveTableDate(){
		html = document.getElementsByClassName("active")[0].innerHTML
		heading = /<h2>(.*?)<\/h2>/g.exec(html)
		heading = heading[1].replace("Week of", "")
		heading = heading.substring(1)
		heading = heading.split("/").reverse().join("-");
		return heading
	}

	function detectActive(btn){
		//console.log(document.getElementsByClassName("item")[1] == document.getElementsByClassName("active")[0]);
		//console.log(btn.id);
		if ((document.getElementsByClassName("item")[1] == document.getElementsByClassName("active")[0] || document.getElementsByClassName("item")[0] == document.getElementsByClassName("active")[0]) && btn.id == 'left') {
			document.body.style.transition = 'background-color 500ms linear';
			document.body.style.backgroundColor = '#F0D9FF';
		}
		else {
			document.body.style.transition = 'background-color 500ms linear';
			document.body.style.backgroundColor = 'ghostwhite';
		}
	}

	function displayDefault(){
		document.getElementsByClassName("active")[0].classList.remove("active")
		document.getElementsByClassName("default")[0].classList.add("active")
		document.body.style.transition = 'background-color 500ms linear';
		document.body.style.backgroundColor = '#F0D9FF';
	}

	function displayThisWeek(){
		document.body.style.transition = 'background-color 500ms linear';
		document.body.style.backgroundColor = 'ghostwhite';
		
		for ( var tblinc = 1; tblinc < tablecount; tblinc++ ) {
			//console.log(tblinc)
			//console.log(data[tblinc.toString()]["weekdate"])
			var date = new Date(data[tblinc.toString()]["weekdate"])
			date = date.toLocaleDateString("en-GB", {timeZone: "Europe/London"})

			if (date == weekOfDate){
				document.getElementsByClassName("active")[0].classList.remove("active")
				document.getElementsByClassName("thisWeek")[0].classList.add("active")
			}
		}
	}

	function updateTimetableTable(text, tablename, cellname, quantity){
		document.getElementsByClassName("loader")[0].style.display = "block"
		$.ajax({
	            type: 'POST',
	            url: 'http://localhost:3000/updateTimetableTable',
	            data: {'tutor': localStorage.getItem('tutor'),'student': text,'tablename': tablename, 'cell': cellname, 'quantity': quantity},
	        });
	}

	function loadCellData(){
		console.log("loadCellData")
		var tds = document.getElementsByTagName("td");

		let index = 0;
        
        for ( tblinc = 0; tblinc < tablecount; tblinc++) {
        	if (tblinc < currentweektable && tblinc != 0) {
	        	for (let cellinc = 0; cellinc < 84; cellinc++) {
					tds[index].innerHTML = "";
					tds[index].innerHTML = '<div id="t ' + tblinc + ' c ' + cellinc + '">' + data[tblinc.toString()]["c"+cellinc.toString()] + '</div>' + tds[index].innerHTML + '</section>';
					index = index + 1;
				}
			}
			else {
				for (let cellinc = 0; cellinc < 84; cellinc++) {
					tds[index].innerHTML = "";
					tds[index].innerHTML = '<div id="t ' + tblinc + ' c ' + cellinc + '">' + data[tblinc.toString()]["c"+cellinc.toString()] + '</div>' + tds[index].innerHTML + '<button id="' + tblinc + ' c ' + cellinc + '" class="button" onclick="SetCell(this)"><i class="bi bi-pencil"></i></button></section>';
					index = index + 1;
				}
        	}
        }
	}

	function removeFirstWord(str) {
		const indexOfSpace = str.indexOf(' ');
		if (indexOfSpace === -1) {
			return '';
		}
		return str.substring(indexOfSpace + 1);
 	}

	function loadRowsNotUpdatedAlert(rowsNotUpdated){
		for (var i=0; i<rowsNotUpdated.length; i++){
			var date = new Date(rowsNotUpdated[i]["weekdate"])
			date = date.toLocaleDateString("en-GB", {timeZone: "Europe/London"})
			alert("Table not updated: Week of "+ date)
		}
	}


</script> 

</body>
</html>