<!DOCTYPE html>
<html>
<head>
	<!--import Boostrap plugin-->
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
	<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>

	<!-- Add icon library -->
	<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.3.0/font/bootstrap-icons.css">

	<style>
		body {
			background-color: ghostwhite;
		}

		table {
		    border: 5px solid #6D3C8B;
		    border-collapse: separate;
		    border-radius: 20px;
			width: 80%;
			margin-left: auto;
	  		margin-right: auto;
	  		font-family: "Gill Sans", sans-serif;
	  		z-index: 1;				/*table is over the highlight*/
	  		overflow: hidden;		/*cuts off the column highlight as to not overflow*/
	  		box-shadow: 5px 10px 50px rgba(0, 0, 0, 0.25); /*offset, offset, blur, colour of shadow*/
		}

		.modaltable {
		    border: 0px;
			width: 100%;
		    border-radius: 20px;
	  		font-family: "Gill Sans", sans-serif;
	  		box-shadow: 0px 0px 0px rgba(0, 0, 0, 0.25);
	  		border-radius: 0px;
		}

		.modaltable td {
		    padding: 5px !important;

		}

		.modal-body {
		    overflow-y: auto;
		    max-height: 350px;
		}

		.modal-body::-webkit-scrollbar { 
    		display: none;  /* Safari and Chrome */
		}

		.modal-open .modal {
			overflow-y: hidden !important;
		}

		.modal {
			position:  absolute;
			float: left;
			left:  50%;
			top: 50%;
			transform: translate(-50%, -50%);
		}

		.modal-header {
			background-color: #684BA3; 
			text-align: center; 
			font-weight: bold; 
			color: ghostwhite;
		}

		h2 {
			width: 80%;			/*same width of table so it aligns*/
	  		font-family: "Gill Sans", sans-serif;
	  		margin-left: auto;
	  		margin-right: auto;
	  		text-align: left;
	  		text-transform: uppercase;
	  		font-weight: bold;
			color: #4F4F4F;
		}

		td, th {
			cursor: pointer;
			padding: 20px;
			position: relative;
			text-align: center;
			width: 12.5%;			/*equal width for all columns*/
			word-break: break-word; /*wrap words*/
			color: #4F4F4F;
		}

		th {
			background-color: #4F4F4F;	/*colour will stay the same even on hover*/
			color: #FFFFFF;
			text-transform: uppercase;
		}

		.button {					/*format of + buttons*/
			border: none;
			color: #684BA3;
			background-color: transparent;
			padding: 1px 1px;
			text-align: center;
			font-size: 8px;
			margin: 5px 5px;
			cursor: pointer;
			float: right;
		}

		tr:hover {					/*highlights rows*/
			background-color: rgba(240, 217, 255, 0.5);
			z-index: -1;			/*behind the table*/
		}

		td:hover::after { 			/*highlights columns*/
			background-color: rgba(240, 217, 255, 0.5);
		    content: "";			/*content that needs to be highlighted*/
		    height: 10000px;    	/*size of the content*/
		    left: 0;
		    position: absolute;  
		    top: -5000px;
		    width: 100%;
		    z-index: -1;			/*behind the table*/
		}
		
		.chevron {
			display: inline-block; /*the top and bottom margins/paddings are respected; does not add a line-break after the element, so the element can sit next to other elements.*/
			background-color: #684BA3;
			border: none;
			color: #FFFFFF;
			text-align: center;
			font-size: 25px;
			padding: 0px;
			width: 60px;
			transition: all 0.5s;	/*0.5s transition to change of bg color during hover; see .chevron:hover*/
			cursor: pointer;
			margin: 5px;
			border-radius: 10px;
			float: right;
		}

		.chevron span {
			cursor: pointer;
			display: inline-block;	
			position: relative;
			transition: 0.5s;	/*0.5s transition from < to <<*/
		}

		.chevron:hover {
			background-color: #7E5398; 
		}

		.leftbtn{
			margin-left: 20px !important;
		}

		.leftbtn .left:before {			/*uses :before for animation to happen when you hover to the button instead of out of the button*/
			content: '\00ab';			/*contains << but invisible (opacity 0)*/
			position: absolute;
			opacity: 0;
			top: 0;
			right: 0px;
			/*transition: 0.5s;*/	
			color: #ffffff;
		}

		.leftbtn:hover .left {
			padding-left: 15px;
			color: #7E5398;			/*changes colour of < to become "invisible"*/
		}

		.leftbtn:hover .left:before {		
			opacity: 1;			/* >> becomes visible */
			left: 0;
		}

		.rightbtn .right:before {
			content: '\00bb';		/*>>*/
			position: absolute;
			opacity: 0;
			top: 0;
			left: 0px;
			transition: 0.5s;
			color: #ffffff;
		}

		.rightbtn:hover .right {
			padding-right: 15px;
			color: #7E5398;
		}

		.rightbtn:hover .right:before {
			opacity: 1;
			right: 0;
		}

		.title {
			background-color: transparent;
			width: 50%;
			height: 1%;
			position: absolute;
			margin-left: auto;
	  		margin-right: auto;
			left: 40%;	/*=100-width-10%*/
			top: 35px;
			z-index: 2;
			display: table-row;
		}

		.loader {
			position: fixed;
			top: 50%;
			left: 50%;
			transform: translate(-50%, -50%);
			border: 16px solid #f3f3f3; /* Light grey */
			border-top: 16px solid #354863; /* Blue */
			border-radius: 50%;
			width: 120px;
			height: 120px;
			animation: spin 2s linear infinite;
		}
		

		@keyframes spin {
			0% { transform: rotate(0deg); }
			100% { transform: rotate(360deg); }
		}

		.defaultbtn{
			width: 50px;
		}

		.thisWeekbtn{
			width: 50px;
		}

		.default th, .thisWeek th {
			background-color: #A96CCE !important;	
			color: #FFFFFF;
		}
		.default h2, .default td, .thisWeek h2, .thisWeek td {
			color: #4F4F4F;
		}

		.future tr:hover, .future td:hover::after, .default tr:hover, .default td:hover::after {
			background-color: rgba(249, 249, 249, 0.5);
		}

		.past table {
		    border: 5px solid #EDEDFF !important;
		}
		.past th { 
			background-color: #BEAEE2 !important;
			color: #F0D9FF;
			text-transform: uppercase;
		}
		.past td, .past h2{
			color: 	#BEAEE2;
		}

		.future th { 
			background-color: #8666C5 !important;
			color: #FFF;
			text-transform: uppercase;
		}

		.tutorbtn{
			width: 150px;
		}

		.bi-person{
			float: left;
			padding-left: 10px;
			margin-right: -10px;
		}


		#tutorname{
			text-align: center !important;
		}

		h3 {
			float: left;
		}

		.btn-primary  {
			background-color: #684BA3;
			border-color: #684BA3;
		}

		.btn-primary:hover {
			background-color: #7E5398;
		}
		
		input[type="text"]:focus { 	/*change appearance when on focus*/
			border-color: #684BA3;
		}


		
	</style>
</head>

<body>
    <!-- Left and right controls -->
	<div class = "title">
    	<button class="chevron rightbtn" id = "right" onclick="detectActive(this); AddTable();" href="#myCarousel" data-slide="next">
	    	<span class="right"> › </span>
	    </button>
    	<button class="chevron leftbtn" id = "left" onclick="detectActive(this)" href="#myCarousel" data-slide="prev">
    		<span class="left"> ‹ </span>
	    </button>
		<button class ="chevron addtutorbtn" onclick="addTutor()"><i class="bi bi-person-plus-fill"></i></button>
		<button class ="chevron tutorbtn" onclick="changeTutor()"><i class="bi bi-person"></i><span id ="tutorname"></span></button>
		<button class ="chevron defaultbtn" onclick="displayDefault()"><i class="bi bi-pen"></i></button>
		<button class ="chevron thisWeekbtn" onclick="displayThisWeek()"><i class="bi bi-calendar-event"></i></button>
		<button class="chevron thisWeekbtn" data-toggle="modal" data-target="#hoursModal"><i class="bi bi-clock-history"></i></button>'
    </div>
	<!--start of carousel-->
	<div id="myCarousel" class="carousel slide" style="top: 27px;" data-interval="false" data-wrap="false">
	    <div id = "tables" class="carousel-inner">
	  	</div>    
	</div>
	<!-------COUNT HOURS MODAL------>
	<div class="modal fade" id="hoursModal" tabindex="-1" role="dialog" aria-labelledby="hoursModalLabel" aria-hidden="true">
	  <div class="modal-dialog" role="document">
	    <div class="modal-content">
	      <div class="modal-header">
	        <div class="modal-title" id="hoursModalLabel">
	        	<button type="button" class="close" data-dismiss="modal" aria-label="Close" style="float: right; color: ghostwhite;">
	          	<span aria-hidden="true">&times;</span>
	        	</button>
	        	<span style="width: 50%; float:left;"><p style="margin: 0px 0px 0px;">Student</p></span>
	        	<span style="width: 50%;"><p style="margin: 0px 0px 0px;">Hours</p></span>
	        </div>
	      </div>
	      <div class="modal-body">
				<table class = "modaltable" id = "modaltable">
			    	
			    </table>
	      </div>
	    </div>
	  </div>
	</div>

	<!-------SET CELL MODAL------>

	<div class="modal fade inmodal" id="setCellModal" tabindex="-1" role="dialog" aria-labelledby="setCellModalLabel" aria-hidden="true">
		<div class="modal-dialog inmodal" role="document">
			<div class="modal-content inmodal">
			  <div class="modal-header inmodal">
			    <h3 class="modal-title inmodal" id="setCellModalLabel"></h3>
			    <button type="button" class="close inmodal" data-dismiss="modal" aria-label="Close" style="color: ghostwhite;">
			      <span aria-hidden="true" class = "inmodal">&times;</span>
			    </button>
			  </div>
			  <div class="modal-body inmodal">
			    <form>
			      <div class="form-group inmodal">
			        <label for="student-name" class="col-form-label inmodal">Name of student:</label>
			        <input type="text" class="form-control inmodal" id="student-name"></input>
			      </div>
			    </form>
			  </div>
			  <div class="modal-footer inmodal">
			  	<button type="button" class="btn btn-secondary delete">Delete</button>
			    <button id = "submit" type="button" class="btn btn-primary submit">Submit</button>
			  </div>
			</div>
		</div>
	</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/web-socket-js/1.0.0/web_socket.min.js" integrity="sha512-jtr9/t8rtBf1Sv832XjG1kAtUECQCqFnTAJWccL8CSC82VGzkPPih8rjtOfiiRKgqLXpLA1H/uQ/nq2bkHGWTQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

<script>
	var urlLocation = location.origin
	const url = location.origin.replace(/^http/, 'ws')
    const connection = new WebSocket(url)

	var data = [{}]
	var tablecount
	var tutors = []

	if (!localStorage.getItem('tutor')){
		localStorage.setItem('tutor', tutors[0])
	}

	$.ajax({
		type: 'POST',			//copy values of primary row to new row, with new id = weekdate
		url: urlLocation+'/getTutorNames',
		success: function(result){tutors = result; console.log(tutors);}
	});

	$.ajax({
		type: 'POST',			//copy values of primary row to new row, with new id = weekdate
		url: urlLocation+'/getTimetableData',
		data: {'tutor': localStorage.getItem('tutor')},
		success: function(result){data = JSON.parse(result); tablecount = Object.keys(data).length;	loadTable(); loadCellData()}
	});

	document.getElementById("tutorname").innerHTML= localStorage.getItem('tutor')

	let todayDate = new Date();					//gets current day
	let dayofweeknumber = todayDate.getDay();
	let nameOfDay;
	let weekOfDate = new Date()
	let currentweektable;
	weekOfDate.setDate(weekOfDate.getDate() - dayofweeknumber + 1)
	weekOfDateMySQLFriendly = weekOfDate.toLocaleDateString("en-US", {timeZone: "Europe/London"})
	weekOfDate  = weekOfDate.toLocaleDateString("en-GB", {timeZone: "Europe/London"})

	function loadTable() {
		document.getElementById("tables").innerHTML = "<div class='loader'></div> <div class='item default'> <h2> Default Schedule </h2><table><tr> <th>Time</th> <th>Monday</th> <th>Tuesday</th> <th>Wednesday</th> <th>Thursday</th> <th>Friday</th> <th>Saturday</th> <th>Sunday</th> </tr> <tr> <th>0900-1000</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1000-1100</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1100-1200</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1200-1300</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1300-1400</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1400-1500</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1500-1600</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1600-1700</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1700-1800</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1800-1900</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1900-2000</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>2000-2100</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> </table> </br></br></br> </div>"

		let weekformat = "past";
		for ( var tblinc = 1; tblinc < tablecount; tblinc++ ) {

			//console.log(data[tblinc.toString()]["id"]);
			
			var date = new Date(data[tblinc.toString()]["weekdate"])
			date = date.toLocaleDateString("en-GB", {timeZone: "Europe/London"})

			let newtable = '<div class="item ' + weekformat + '"><h2>Week of ' + date + '</h2><table><tr> <th>Time</th> <th>Monday</th> <th>Tuesday</th> <th>Wednesday</th> <th>Thursday</th> <th>Friday</th> <th>Saturday</th> <th>Sunday</th> </tr> <tr> <th>0900-1000</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1000-1100</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1100-1200</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1200-1300</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1300-1400</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1400-1500</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1500-1600</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1600-1700</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1700-1800</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1800-1900</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1900-2000</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>2000-2100</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> </table> </br></br></br> </div>';
	    
			if (date == weekOfDate){
				currentweektable = tblinc;
				weekformat = "future"
				document.getElementsByClassName("loader")[0].style.display = "none"
				newtable = '<div class="item thisWeek active"><h2>Week of ' + date + '</h2><table><tr> <th>Time</th> <th class = "monday">Monday</th> <th class = "tuesday">Tuesday</th> <th class = "wednesday">Wednesday</th> <th class = "thursday">Thursday</th> <th class = "friday">Friday</th> <th class = "saturday">Saturday</th> <th class = "sunday">Sunday</th> </tr> <tr> <th>0900-1000</th> <td class = "monday"></td> <td class = "tuesday"></td> <td class = "wednesday"></td> <td class = "thursday"></td> <td class = "friday"></td> <td class = "saturday"></td> <td class = "sunday"></td> </tr> <tr> <th>1000-1100</th> <td class = "monday"></td> <td class = "tuesday"></td> <td class = "wednesday"></td> <td class = "thursday"></td> <td class = "friday"></td> <td class = "saturday"></td> <td class = "sunday"></td> </tr> <tr> <th>1100-1200</th> <td class = "monday"></td> <td class = "tuesday"></td> <td class = "wednesday"></td> <td class = "thursday"></td> <td class = "friday"></td> <td class = "saturday"></td> <td class = "sunday"></td> </tr> <tr> <th>1200-1300</th> <td class = "monday"></td> <td class = "tuesday"></td> <td class = "wednesday"></td> <td class = "thursday"></td> <td class = "friday"></td> <td class = "saturday"></td> <td class = "sunday"></td> </tr> <tr> <th>1300-1400</th> <td class = "monday"></td> <td class = "tuesday"></td> <td class = "wednesday"></td> <td class = "thursday"></td> <td class = "friday"></td> <td class = "saturday"></td> <td class = "sunday"></td> </tr> <tr> <th>1400-1500</th> <td class = "monday"></td> <td class = "tuesday"></td> <td class = "wednesday"></td> <td class = "thursday"></td> <td class = "friday"></td> <td class = "saturday"></td> <td class = "sunday"></td> </tr> <tr> <th>1500-1600</th> <td class = "monday"></td> <td class = "tuesday"></td> <td class = "wednesday"></td> <td class = "thursday"></td> <td class = "friday"></td> <td class = "saturday"></td> <td class = "sunday"></td> </tr> <tr> <th>1600-1700</th> <td class = "monday"></td> <td class = "tuesday"></td> <td class = "wednesday"></td> <td class = "thursday"></td> <td class = "friday"></td> <td class = "saturday"></td> <td class = "sunday"></td> </tr> <tr> <th>1700-1800</th> <td class = "monday"></td> <td class = "tuesday"></td> <td class = "wednesday"></td> <td class = "thursday"></td> <td class = "friday"></td> <td class = "saturday"></td> <td class = "sunday"></td> </tr> <tr> <th>1800-1900</th> <td class = "monday"></td> <td class = "tuesday"></td> <td class = "wednesday"></td> <td class = "thursday"></td> <td class = "friday"></td> <td class = "saturday"></td> <td class = "sunday"></td> </tr> <tr> <th>1900-2000</th> <td class = "monday"></td> <td class = "tuesday"></td> <td class = "wednesday"></td> <td class = "thursday"></td> <td class = "friday"></td> <td class = "saturday"></td> <td class = "sunday"></td> </tr> <tr> <th>2000-2100</th> <td class = "monday"></td> <td class = "tuesday"></td> <td class = "wednesday"></td> <td class = "thursday"></td> <td class = "friday"></td> <td class = "saturday"></td> <td class = "sunday"></td> </tr> </table> </br></br></br> </div>'; }

			tables.insertAdjacentHTML("beforeend", newtable); //print existing table
			
		}

		dayfcn(dayofweeknumber);
        for (var i = 0; i < 13 ; i++) {		//highlights current day in second table
			document.getElementsByClassName(nameOfDay)[i].style.backgroundColor = "rgba(240, 217, 255, 0.5)";
		}
	}

	function dayfcn(number) {	//gets current day
		switch(number) {
		case 0: 
        	nameOfDay = 'sunday';
        	break;

   		case 1:
        	nameOfDay = 'monday';
        	break;

    	case 2:
        	nameOfDay = 'tuesday';
        	break;

    	case 3:
        	nameOfDay = 'wednesday';
        	break;

    	case 4:
        	nameOfDay = 'thursday';
        	break;

    	case 5:
        	nameOfDay = 'friday';
        	break;

    	case 6:
        	nameOfDay = 'saturday';
        	break;
		}
	}

	$('#setCellModal').on('shown.bs.modal', function() {	//focus on text input; automatically puts cursor in the input field
		$('#student-name').focus();
	})

	$(document).on('show.bs.modal','#setCellModal', function (event) { //detect which row and column triggered the modal

		var button = $(event.relatedTarget) 
		var recipient = button.data('id') 

		timeday = recipient.split(" ");
		var day = timeday[1] % 7;
		day = day + 1;
		if (day == 7) {
			day = 0;
		}
		dayfcn(day);
		nameOfDay = nameOfDay.charAt(0).toUpperCase() + nameOfDay.slice(1);

		let time
		if (timeday[1] < 7) {
			time = '0900-1000'
		} else if (timeday[1] < 14) {
			time = '1000-1100'
		} else if (timeday[1] < 21) {
			time = '1100-1200'
		} else if (timeday[1] < 28) {
			time = '1200-1300'
		} else if (timeday[1] < 35) {
			time = '1300-1400'
		} else if (timeday[1] < 42) {
			time = '1400-1500'
		} else if (timeday[1] < 49) {
			time = '1500-1600'
		} else if (timeday[1] < 56) {
			time = '1600-1700'
		} else if (timeday[1] < 63) {
			time = '1700-1800'
		} else if (timeday[1] < 70) {
			time = '1800-1900'
		} else if (timeday[1] < 77) {
			time = '1900-2000'
		} else if (timeday[1] < 84) {
			time = '2000-2100'
		} else {
			time = 'error'
		}

		var modal = $(this)
		modal.find('.modal-title').text(nameOfDay + ' ' + time)
		let cell = "t " + timeday[0] + " c " + timeday[1];
		modal.find('.modal-body input').val(document.getElementById(cell).innerHTML)
	})

	$('.submit').on('click', function(){	//New SetCell function
		var getval = $('#student-name').val();

		if (getval == null || getval == "") {
		}

		else {
		    let cell = "t " + timeday[0] + " c " + timeday[1];
		    let cellname = "c" + timeday[1]; 
		    document.getElementById(cell).innerHTML = getval; //Saves it to the cell# that triggered the function.
		    let tablename = data[timeday[0].toString()]["weekdate"]; //gets the ID of the row

	        let date2 = new Date(tablename)
	        if (date2.toString() !== "Invalid Date") {
				tablename = date2.toLocaleDateString("en-GB", {timeZone: "Europe/London"})
			}
	        tablename = tablename.slice(0,10).split("/").reverse().join("-");

			if (timeday[0] == 0){
				updateTimetableTable(getval, tablename, cellname, "all")
			}else{
				updateTimetableTable(getval, tablename, cellname, "single")
			}
		}
		hourCount();
		$('#setCellModal').modal('hide');
	})

	$('.delete').on('click', function(){ //delete = setting cell to blank string
		getval = "";
	    let cell = "t " + timeday[0] + " c " + timeday[1];
	    let cellname = "c" + timeday[1]; 
	    document.getElementById(cell).innerHTML = getval; //Saves it to the cell# that triggered the function.
	    let tablename = data[timeday[0].toString()]["weekdate"]; //gets the ID of the row

        let date2 = new Date(tablename)
        if (date2.toString() !== "Invalid Date") {
			tablename = date2.toLocaleDateString("en-GB", {timeZone: "Europe/London"})
		}
        tablename = tablename.slice(0,10).split("/").reverse().join("-");



		if (timeday[0] == 0){
			updateTimetableTable(getval, tablename, cellname, "all")
		}else{
			updateTimetableTable(getval, tablename, cellname, "single")
		}
		hourCount();
		$('#setCellModal').modal('hide');
	})


	$('#setCellModal').on('hidden.bs.modal', function () {		//resets the text field
   		$(this).find('form').trigger('reset');
	})

	$(document).on('shown.bs.modal','#hoursModal', function (event) {
        hourCount();
	})

	$('#hoursModal').on('hidden.bs.modal', function () {		//resets the text field
   		document.getElementById("hourstable").remove();
	})

	$("#hoursModal").blur(function() {
 		$('#hoursModal').modal('hide');
	});

	$('body').click(function(event) {
		if (!event.target.className.includes("inmodal")){
	 		$('#setCellModal').modal('hide');
 		}
	});

	function AddTable(){		//When Add Table button is clicked, prints a new table
		if (document.getElementsByClassName("active")[0].innerHTML.includes("t "+(data.length-1).toString())){
						
			let date = new Date(getActiveTableDate())
			date.setDate(date.getDate() + 7);
			date = date.toLocaleDateString("en-GB", {timeZone: "Europe/London"})

			let weekdate =  date	/*adds date of Monday to table title*/

			if (weekdate == null || weekdate == "") {
			} 

			else {			//if there's an inputted value in prompt, add table
				$.ajax({
					type: 'POST',			//copy values of primary row to new row, with new id = weekdate
					url: urlLocation+'/addTimetableTable',
					data: {'tutor': localStorage.getItem('tutor'), 'weekdate': weekdate.toString().split("/").reverse().join("-")},
				});

				data[tablecount] = data [0];				//copy values of primary row to new row
				data[tablecount.toString()]['weekdate'] = weekdate;	//change id of new row to weekdate

				let newtable = '<div class="item future"><h2>Week of ' + weekdate + '</h2><table><tr> <th>Time</th> <th>Monday</th> <th>Tuesday</th> <th>Wednesday</th> <th>Thursday</th> <th>Friday</th> <th>Saturday</th> <th>Sunday</th> </tr> <tr> <th>0900-1000</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1000-1100</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1100-1200</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1200-1300</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1300-1400</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1400-1500</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1500-1600</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1600-1700</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1700-1800</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1800-1900</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>1900-2000</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <th>2000-2100</th> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> </table> </br></br></br> </div>';
			
				tables.insertAdjacentHTML("beforeend", newtable); //print new table
				
				var index = tablecount*84;	//one table = 84 cells. First cell in new table should start at multiples of 84
				var tds = document.getElementsByTagName("td");	//get all td elements

				for (let cellinc = 0; cellinc < 84; cellinc++) {
					tds[index].innerHTML = '<span id="t ' + tablecount + ' c ' + cellinc + '">' + data[tablecount]["c"+cellinc.toString()] + '</span><button id="' + tablecount + ' c ' + cellinc + '" class="button" data-toggle="modal" data-target="#setCellModal" data-id="' + tablecount + ' ' + cellinc +'"><i class="bi bi-pencil"></i></button>';
					index = index + 1;
				}
			}
			
		tablecount++
		}

	}

    var reload = true;

    connection.onmessage = (e) => {
	   	var message = e.data.split(" ")[0]
		if (message == "tutor:"){
			let tutor = removeFirstWord(e.data)
			if (tutor == localStorage.getItem('tutor')){
				//console.log("do reload")
				reload = true
			}else{
				//console.log("don't reload")
				reload = false
			}
		}
		if (message == "data:" && reload == true){
			data = JSON.parse(removeFirstWord(e.data))
			tablecount = Object.keys(data).length;
			loadCellData()
			document.getElementsByClassName("loader")[0].style.display = "none"
	    }
		if (message == "rowsNotUpdated:" && reload == true){
			let rowsNotUpdated = JSON.parse(removeFirstWord(e.data))
			loadRowsNotUpdatedAlert(rowsNotUpdated)
		}
    }

	function changeTutor(){
		let tutor;
		if (tutors.indexOf(localStorage.getItem('tutor')) == tutors.length-1){
			tutor = tutors[0]
		}else{
			tutor = tutors[tutors.indexOf(localStorage.getItem('tutor'))+1]
		}
		localStorage.setItem('tutor', tutor)
		window.location.reload()
	}

	function getActiveTableDate(){
		html = document.getElementsByClassName("active")[0].innerHTML
		heading = /<h2>(.*?)<\/h2>/g.exec(html)
		heading = heading[1].replace("Week of", "")
		heading = heading.substring(1)
		heading = heading.split("/").reverse().join("-");
		return heading
	}

	function detectActive(btn){
		//changes default table bg; if table before default is active
		if ((document.getElementsByClassName("item")[1] == document.getElementsByClassName("active")[0] || document.getElementsByClassName("item")[0] == document.getElementsByClassName("active")[0]) && btn.id == 'left') {
			document.body.style.transition = 'background-color 500ms linear';
			document.body.style.backgroundColor = '#F0D9FF';
		}
		//changes currentweek table bg; if table before and after currentweek table is active
		else if (((document.getElementsByClassName("item")[currentweektable-1] == document.getElementsByClassName("active")[0] && btn.id == 'right') || (document.getElementsByClassName("item")[currentweektable+1] == document.getElementsByClassName("active")[0]) && btn.id == 'left')) {
			document.body.style.transition = 'background-color 500ms linear';
			document.body.style.backgroundColor = 'ghostwhite';
		}
		//changes future tables bg; if currentweek/future table is active
		else if ((document.getElementsByClassName("item")[currentweektable] == document.getElementsByClassName("active")[0] && btn.id == 'right') || (document.getElementsByClassName("active")[0].classList.contains("future"))) {
			document.body.style.transition = 'background-color 500ms linear';
			document.body.style.backgroundColor = '#DEDDFF';
		}
		//changes past tables bg
		else {
			document.body.style.transition = 'background-color 500ms linear';
			document.body.style.backgroundColor = '#F3F1F5';
		}
	}

	function displayDefault(){
		document.getElementsByClassName("active")[0].classList.remove("active")
		document.getElementsByClassName("default")[0].classList.add("active")
		document.body.style.transition = 'background-color 500ms linear';
		document.body.style.backgroundColor = '#F0D9FF';
	}

	function displayThisWeek(){
		document.body.style.transition = 'background-color 500ms linear';
		document.body.style.backgroundColor = 'ghostwhite';
		
		for ( var tblinc = 1; tblinc < tablecount; tblinc++ ) {
			var date = new Date(data[tblinc.toString()]["weekdate"])
			date = date.toLocaleDateString("en-GB", {timeZone: "Europe/London"})

			if (date == weekOfDate){
				document.getElementsByClassName("active")[0].classList.remove("active")
				document.getElementsByClassName("thisWeek")[0].classList.add("active")
			}
		}
	}

	function updateTimetableTable(text, tablename, cellname, quantity){
		document.getElementsByClassName("loader")[0].style.display = "block"
		$.ajax({
	            type: 'POST',
	            url: urlLocation+'/updateTimetableTable',
	            data: {'tutor': localStorage.getItem('tutor'),'student': text,'tablename': tablename, 'cell': cellname, 'quantity': quantity},
	        });
	}

	function loadCellData(){
		var tds = document.getElementsByTagName("td");
		let index = 0;
        
        for (tblinc = 0; tblinc < tablecount; tblinc++) { //remove buttons for past weeks
        	if (tblinc < currentweektable && tblinc != 0) {
	        	for (let cellinc = 0; cellinc < 84; cellinc++) {
					tds[index].innerHTML = "";
					tds[index].innerHTML = '<div id="t ' + tblinc + ' c ' + cellinc + '">' + data[tblinc.toString()]["c"+cellinc.toString()] + '</div>';
					index = index + 1;
				}
			}
			else {	
				for (let cellinc = 0; cellinc < 84; cellinc++) {
					tds[index].innerHTML = "";
					tds[index].innerHTML = '<span id="t ' + tblinc + ' c ' + cellinc + '">' + data[tblinc.toString()]["c"+cellinc.toString()] + '</span><button id="' + tblinc + ' c ' + cellinc + '" class="button" data-toggle="modal" data-target="#setCellModal" data-id="' + tblinc + ' ' + cellinc +'"><i class="bi bi-pencil"></i></button>';
					index = index + 1;
				}
        	}
        }
	}

	function removeFirstWord(str) {
		const indexOfSpace = str.indexOf(' ');
		if (indexOfSpace === -1) {
			return '';
		}
		return str.substring(indexOfSpace + 1);
 	}

	function loadRowsNotUpdatedAlert(rowsNotUpdated){
		for (var i=0; i<rowsNotUpdated.length; i++){
			var date = new Date(rowsNotUpdated[i]["weekdate"])
			date = date.toLocaleDateString("en-GB", {timeZone: "Europe/London"})
			alert("Table not updated: Week of "+ date)
		}
	}

	$(document).keypress(function (e) { //click submit within modal when Enter is pressed
		var key = e.which;
		if(key == 13 && $('#setCellModal').is(':visible')) {  
			$('#submit').click();
			return false;
		}
		else if (key==13) {
			e.preventDefault();
		}
	});  
	function addTutor(){
		let newTutor = prompt()

		$.ajax({
	            type: 'POST',
	            url: urlLocation+'/addTutor',
	            data: {'newTutor': newTutor},
				success: function(result){console.log(result);localStorage.setItem('tutor', newTutor); setTimeout(function(){window.location.reload()}, 1000)}
	        });
	}

	function hourCount() {
		var thisweek = document.getElementsByClassName("active")[0];
		var cells = [];
		var newrow;
		for (i=0; i<84; i++){
			cells.push(thisweek.getElementsByTagName("td")[i].innerText);
		}
		var map = cells.reduce(function(prev, cur) {
	  		prev[cur] = (prev[cur] || 0) + 1;
	  		return prev;
		}, {});
		const unique = [...new Set(cells)];

		var body = '<tbody id = "hourstable"></tbody>';
		modaltable.insertAdjacentHTML("beforeend", body);

		for (i = 1; i < unique.length; i++){
			newrow = "<tr><td>" + unique[i] + "</td><td>" + map[unique[i]] + "</td></tr>";
			hourstable.insertAdjacentHTML("beforeend", newrow); 
		}
		// console.log(map);
		// console.log(thisweek.getElementsByTagName("h2"));
	}

</script> 

</body>
</html>